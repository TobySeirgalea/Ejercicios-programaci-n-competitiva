import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
    
public class Main {
        private static int cantidadBombas;
        private static int[] tiempoDescubrimiento;
        private static int[] low; 
        private static int[] padre;
        private static int time = 0;
        private static int[] hijos;
        private static LinkedList<Integer>[] adjList;
        private static StringBuilder respuesta = new StringBuilder();
        private static ArrayList<Integer> puntosArticulacion;
    
        //Implemento algoritmo de Tarjan para contar cc.
        //Antes usé el siguiente enfoque y no cumplía con el tiempo pedido. Lo que hacía era por cada vértice marcarlo como visitado y hacer DFS. Cuando salía de la recursión solo visitaba los nodos que eran parte de la Componente Conexa (cc)
        //Si ya lo había visitado no entraba, pero sino volvía a correr DFS en esa cc. Así con cada nodo.
        //Luego investigué y resulta que Tarjan descubrió como hacerlo en O(V + E) en vez del O(V*(V + E)) que me tomaba. Se ve que el ejercicio apunta a que se resuelva de esa manera sino no pasa por tiempo.
        //Al algortimo le hice unas adaptaciones: Llevar trackeo del padre de cada nodo, así si un nodo es raíz y tiene un hijo cuento como que no es cc. Además de llevar trackeo de la cantidad de hijos de cada nodo.
        private static int DFSAP(int nodoActual, int previo){
            low[nodoActual] = ++time;
            tiempoDescubrimiento[nodoActual] = time;
            for (Integer nodo : adjList[nodoActual]) {
            if (nodo != previo){
                if(tiempoDescubrimiento[nodo] == -1){
                    hijos[nodoActual] += 1;
                    padre[nodo] = nodoActual;
                    DFSAP(nodo, nodoActual);
                    if (tiempoDescubrimiento[nodoActual] <= low[nodo] && padre[nodoActual] != -1){
                        puntosArticulacion.set(nodoActual, puntosArticulacion.get(nodoActual) + 1);        
                    }
                low[nodoActual] = Math.min(low[nodoActual], low[nodo]);
                }
                else{
                    low[nodoActual] = Math.min(low[nodoActual], tiempoDescubrimiento[nodo]);
                }
            }
        }
        return hijos[nodoActual];
        }

        private static void DFS(LinkedList[] adjList){
            for (int i = 0; i < adjList.length; i++){
                if (tiempoDescubrimiento[i] == -1){
                    int comp = DFSAP(i, i) - 1;
                    if (comp > 0) {
                        puntosArticulacion.set(i, comp);
                    }
                }
            }
            ArrayList<tupla> piggeonValue = new ArrayList<tupla>();
            for (int i = 0; i < puntosArticulacion.size(); i++) {
                piggeonValue.add(new tupla(i, puntosArticulacion.get(i) + 1));
            }
            ComparadorTuplas comparadorPorSnd = new ComparadorTuplas();
            piggeonValue.sort(comparadorPorSnd);
            for (int i = 0; i < cantidadBombas; i++) {
                respuesta.append(piggeonValue.get(i).toString() + "\n");
            }
        }  
        public static void procesarEntrada() throws IOException{
            BufferedReader scan = new BufferedReader(new InputStreamReader(System.in));
                String[] entrada = scan.readLine().split(" ");
                while (Integer.valueOf(entrada[0]) != 0 && Integer.valueOf(entrada[1]) != 0) {
                    int nroEstaciones = Integer.valueOf(entrada[0]);
                    cantidadBombas = Integer.valueOf(entrada[1]);
                    inicializarArraysData(nroEstaciones);
                    while (Integer.parseInt(entrada[0]) != -1 && Integer.parseInt(entrada[1]) != -1) {
                        entrada = scan.readLine().split(" ");
                        if (Integer.parseInt(entrada[0]) != -1 && Integer.parseInt(entrada[1]) != -1){
                            adjList[Integer.parseInt(entrada[0])].add(Integer.parseInt(entrada[1]));
                            adjList[Integer.parseInt(entrada[1])].add(Integer.parseInt(entrada[0]));
                        }     
                    }
                    entrada = scan.readLine().split(" ");
                    DFS(adjList);
                    System.out.println(respuesta);
                    respuesta.delete(0, respuesta.length());
                }        
                scan.close();
            }

        private static void inicializarArraysData(int nroEstaciones) {
            tiempoDescubrimiento = new int[nroEstaciones];
            low = new int[nroEstaciones]; 
            padre = new int[nroEstaciones];
            hijos = new int[nroEstaciones];
            adjList =  new LinkedList[nroEstaciones];
            puntosArticulacion = new ArrayList<Integer>(nroEstaciones);
            for (int i = 0; i < nroEstaciones; i++) {
                adjList[i] = new LinkedList<>();
                tiempoDescubrimiento[i] = -1;
                padre[i] = -1;
                puntosArticulacion.add(0);
            }
        }

        public static void main(String[] args) throws IOException {
            procesarEntrada();
        }
    }
class tupla{
        private int fst;
        private int snd;
        public tupla(int fst, int snd){
            this.fst = fst;
            this.snd = snd;
        }
        public int getFst() {
            return fst;
        }
        public int getSnd() {
            return snd;
        }
        @Override
        public String toString() {
            return fst + " " + snd;
        }
        public void setFst(int fst) {
            this.fst = fst;
        }
        public void setSnd(int snd) {
            this.snd = snd;
        }
}

class ComparadorTuplas implements Comparator<tupla>{
    @Override
    public int compare(tupla o1, tupla o2) {
        return Integer.compare(o2.getSnd(), o1.getSnd());
        //Retorna -1 si o2 < o1, 0 si o2 == o1, 1 si o2 > o1
    }
}

